// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  isGuest   Boolean  @default(false)
  password  String?
  nickname  String // ✅ Ya no es único
  color     String
  createdAt DateTime @default(now())

  gamePlayers  GamePlayer[]
  spectators   Spectator[]
  shots        Shot[]
  createdGames Game[]       @relation("UserCreatedGames")
}

model Game {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  status        String // 'waiting', 'in_progress', 'finished'
  name          String?  @unique
  accessCode    String?
  isPublic      Boolean  @default(false)
  isMatchmaking Boolean  @default(false)

  maxPlayers Int // 2 a 6
  mode       String // 'individual' | 'teams'
  difficulty String // 'easy', 'medium', 'hard'
  teamCount  Int? // solo si mode = 'teams'
  board      Json

  createdById Int?
  createdBy   User? @relation("UserCreatedGames", fields: [createdById], references: [id])

  gamePlayers GamePlayer[]
  spectators  Spectator[]
  shots       Shot[]
}

model GamePlayer {
  id     Int  @id @default(autoincrement())
  userId Int
  gameId Int
  user   User @relation(fields: [userId], references: [id])
  game   Game @relation(fields: [gameId], references: [id])

  team     Int?
  isWinner Boolean   @default(false)
  leftAt   DateTime?
}

model Spectator {
  id     Int  @id @default(autoincrement())
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Shot {
  id        Int      @id @default(autoincrement())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  shooter   User     @relation(fields: [shooterId], references: [id])
  shooterId Int
  type      String // "normal", "bomb", "missile", etc.
  target    Json // Ej: { x: 3, y: 5 } o lista de coordenadas
  hit       Boolean  @default(false)
  createdAt DateTime @default(now())
}
