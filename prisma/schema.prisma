// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameStatus {
  waiting
  in_progress
  finished
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  isGuest   Boolean  @default(false)
  password  String?
  nickname  String
  color     String
  createdAt DateTime @default(now())

  gamePlayers  GamePlayer[]
  spectators   Spectator[]
  shots        Shot[]
  createdGames Game[]            @relation("UserCreatedGames")
  playerStats  GamePlayerStats[]
  globalStats  UserGlobalStats?
}

model Game {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  status        GameStatus @default(waiting)
  name          String?    @unique
  accessCode    String?
  isPublic      Boolean    @default(false)
  isMatchmaking Boolean    @default(false)

  maxPlayers Int // 2 a 6
  mode       String // 'individual' | 'teams'
  difficulty String // 'easy', 'medium', 'hard'
  teamCount  Int? // solo si mode = 'teams'
  board      Json?

  createdById Int?
  createdBy   User? @relation("UserCreatedGames", fields: [createdById], references: [id])

  gamePlayers GamePlayer[]
  spectators  Spectator[]
  shots       Shot[]
  stats       GamePlayerStats[]
}

model GamePlayer {
  id     Int @id @default(autoincrement())
  userId Int
  gameId Int

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  team     Int?
  isWinner Boolean   @default(false)
  leftAt   DateTime?
}

model Spectator {
  id     Int @id @default(autoincrement())
  gameId Int
  userId Int

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Shot {
  id        Int      @id @default(autoincrement())
  gameId    Int
  shooterId Int
  type      String
  target    Json
  hit       Boolean  @default(false)
  createdAt DateTime @default(now())

  game    Game @relation(fields: [gameId], references: [id])
  shooter User @relation(fields: [shooterId], references: [id])
}

model GamePlayerStats {
  id              Int      @id @default(autoincrement())
  gameId          Int
  userId          Int
  totalShots      Int      @default(0)
  successfulShots Int      @default(0)
  accuracy        Float    @default(0) // porcentaje entre 0 y 100
  shipsSunk       Int      @default(0)
  wasWinner       Boolean  @default(false)
  turnsTaken      Int      @default(0)
  shipsRemaining  Int      @default(0)
  wasEliminated   Boolean  @default(false)
  hitStreak       Int      @default(0)
  lastShotWasHit  Boolean  @default(false)
  shotsByType     Json     @default("{}")
  createdAt       DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
}

model UserGlobalStats {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  gamesPlayed     Int       @default(0)
  gamesWon        Int       @default(0)
  totalShots      Int       @default(0)
  successfulShots Int       @default(0)
  accuracy        Float     @default(0)
  shipsSunk       Int       @default(0)
  totalTurnsTaken Int       @default(0)
  maxHitStreak    Int       @default(0)
  nuclearUsed     Int       @default(0)
  lastGameAt      DateTime?

  user User @relation(fields: [userId], references: [id])
}
